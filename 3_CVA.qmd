## Canonical Variate Analysis (CVA) biplot

::: fragment
**Aim**: Dimension reduction technique that maximises variation between
classes while minimising within class variation.
:::

::: fragment
This is achieved by the following tasks:
:::

::: fragment
-   Decomposing Variance
-   Find a linear mapping to canonical space.
-   Find a low dimensional approximation
:::

## Variance Decomposition

::: fragment
The classical variance decomposition
$$\mathbf{T}=\mathbf{B}+\mathbf{W},$$
:::

::: fragment
has as an analogy in this setting $$
\mathbf{X'X} = \mathbf{\bar{\mathbf{X}}'C \bar{\mathbf{X}}} + \mathbf{X' [I - G(G'G)^{-1}C(G'G)^{-1}G'] X}.
$$
:::

::: fragment
The choice of $\mathbf{C}$ determines the variant of CVA:
:::

::: fragment
-   Weighted: $\mathbf{C}=\mathbf{N}=\mathbf{G'G}$
-   Unweighted:
    $\mathbf{C}=\mathbf{I}_G - G^{-1}\mathbf{1}_G\mathbf{1}_G'$
-   Unweighted with weighted centroid: $\mathbf{C}=\mathbf{I}_G$
:::

## Linear Mapping

::: fragment
Find a linear mapping

$$\mathbf{Y}=\mathbf{X}\mathbf{M}, \tag{1}$$
:::

::: fragment
such that
$$\frac{\mathbf{m}'\mathbf{B}\mathbf{m}}{\mathbf{m}'\mathbf{W}\mathbf{m}} \tag{2}$$
is maximised s.t. $\mathbf{m}'\mathbf{W}\mathbf{m}=1$.
:::

::: fragment
It can be shown that this leads to the following equivalent eigen
equations:

$$
\mathbf{W}^{-1}\mathbf{BM} = \mathbf{M \Lambda} \tag{3}
$$

$$
\mathbf{BM} = \mathbf{WM \Lambda} \tag{4}
$$

$$
(\mathbf{W}^{-\frac{1}{2}} \mathbf{B} \mathbf{W}^{-\frac{1}{2}}) \mathbf{M} = (\mathbf{W}^{-\frac{1}{2}} \mathbf{M}) \mathbf{\Lambda} \tag{5}
$$

with $\mathbf{M'BM}= \mathbf{\Lambda}$ and $\mathbf{M'WM}= \mathbf{I}$.
:::

::: fragment
Since the matrix
$\mathbf{W}^{-\frac{1}{2}} \mathbf{B} \mathbf{W}^{-\frac{1}{2}}$ is
symmetric and positive semi-definite the eigenvalues in the matrix
$\mathbf{\Lambda}$ are positive and ordered. The rank of
$\mathbf{B} = min(p, G-1)$ so that only the first $rank(\mathbf{B})$
eigenvalues are non-zero. We form the canonical variates with the
transformation

$$
\bar{\mathbf{Y}} = \bar{\mathbf{X}}\mathbf{M}.\tag{5}
$$
:::

## Low dimensional approximation

::: fragment
The first two canonical variates are given by:

$$\mathbf{\bar{Z}}=\mathbf{\bar{Y}}\mathbf{J}_2=\mathbf{\bar{X}}\mathbf{M}\mathbf{J}_2 \tag{6}$$
where $\mathbf{J'}_2=[\mathbf{I}_2 \quad \mathbf{0}]$. We add the
individual sample points with the same transformation
$$\mathbf{Z}=\mathbf{X}\mathbf{M}\mathbf{J}_2. \tag{7}$$
:::

::: fragment
A new sample point, $\mathbf{x}^*$, can be added by interpolation
$$\mathbf{z}^*=\mathbf{x}^*\mathbf{M}\mathbf{J}_2.\tag{8}$$
:::

## `CVA` function

::: fragment
```{r, echo = TRUE, eval = FALSE}
CVA()
```
:::

::: fragment
| Argument | Description |
|------------------------|------------------------------------------------|
| `bp` | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |
| `classes` | Vector of class membership. User specified, otherwise defaults to vector specified in `biplot`. |
| `dim.biplot` | Dimension of the biplot. Only values 1, 2 and 3 are accepted, with default `2`. |
| `e.vects` | Which eigenvectors (principal components) to extract, with default `1:dim.biplot`. |
| `weightedCVA` | "weighted" or "unweightedCent" or "unweightedI": Controls which type of CVA to perform, with default `"weighted"` |
| `show.class.means` | TRUE or FALSE: Controls whether class means are plotted, with default `TRUE`. |
| `low.dim` | `"sample.opt"` or `"Bhattacharyya.dist"`: Controls method of constructing additional dimension(s) if `dim.biplot` is greater than the number of classes, with default `"sample.opt"`. |

: {tbl-colwidths="\[25,75\]"}
:::

## Class means

::: fragment
The `means()` function allows the user to make adjustments to the points
representing the class means.
:::

::: fragment
| Argument | Description |
|------------------------|------------------------------------------------|
| `bp` | an object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |

: {tbl-colwidths="\[25,75\]"}
:::

::: fragment
### Plotting only a selection of the class means
:::

::: fragment
| Argument | Description |
|-----------------------|------------------------------------------------|
| `which` | a vector containing the groups or classes for which the means should be displayed, with default `bp$g`. |

: {tbl-colwidths="\[25,75\]"}
:::

::: fragment
```{r Selecting the class means}
biplot(state.x77) |> CVA(state.region) |> means(which = c(2,3),label = TRUE) |> plot()
```
::::

## Class means

### Colours and characters for the points

::: fragment
The following arguments control the aesthetic options for the plotted
class mean points:

| Argument | Description |
|------------------------|------------------------------------------------|
|  | the colour(s) for the means, with default as the colour of the samples. |
| `pch` | the plotting character(s) for the means, with default `15`. |
| `cex` | the character expansion(s) for the means, with default `1`. |
| `opacity` | transparency of means. |
| `shade.darker` | a logical value indicating whether the colour of the mean points should be made a shade darker than the default or specified colour, with default `TRUE`. |

: {tbl-colwidths="\[25,75\]"}
:::

## Class means

### Colours and characters for the points

::: fragment
```{r Colours and shapes}
biplot(state.x77) |> CVA(state.region) |> means(cex = c(1,2,3,4),col = "red",pch = c(9,13,4,16)) |> plot()
```
:::

## Class means

### Labels

::: fragment
The following arguments control the aesthetic options for the labels
accompanying the plotted class mean points:

| Argument | Description |
|------------------------|------------------------------------------------|
| `label` | a logical value indicating whether the means should be labelled, with default `TRUE`. |
| `label.col` | a vector of the same length as `which` with label colours for the means, with default as the colour of the means. |
| `label.cex` | a vector of the same length as which with label text expansions for the means, with default `0.75`. |
| `label.side` | the side at which the label of the plotted mean point appears, with default `bottom`. |
| `label.offset` | the offset of the label from the plotted mean point. |

: {tbl-colwidths="\[25,75\]"}
:::

## Class means

### Labels

::: fragment
```{r Labels}
biplot(state.x77) |> CVA(state.region) |> means(label = TRUE,label.side = "top",label.offset = 2,label.cex = 1) |> plot()
```
:::

## Classification regions

::: fragment
This function creates classification regions for the CVA biplot.
:::

::: fragment
The `classify()` function appends the biplot object with the following
elements:

-   A confusion matrix from the classification into classes

-   The classification accuracy rate

-   A logical value indicating whether classification regions are shown
    in the biplot

-   A list of chosen aesthetics for the classification regions

-   The midpoints of the classification regions
:::

## Classification regions

::: fragment
### Classification regions in the CVA biplot
:::

::: fragment
```{r Classification regions }
class.examp<-biplot(state.x77) |> CVA(state.region) |> classify(col = c("cornflowerblue","darkolivegreen3","darkgoldenrod","aquamarine"))
#class.examp$classify
class.examp |> plot()
```
:::

## $\alpha$-bags containing a percentage of observations

::: fragment
This function creates $\alpha$-bags

The `alpha.bags()` function appends the biplot object with the following
elements:

-   A list of coordinates for the $\alpha$-bags for each group

-   A vector of colours for the $\alpha$-bags

-   A vector of line types for the $\alpha$-bags

-   A vector of line widths for the $\alpha$-bags
:::

## $\alpha$-bags containing a percentage of observations

### The $\alpha$-bags in the CVA biplot

::: fragment
```{r Alpha bags}
ab.examp<-biplot(state.x77) |> CVA(state.region) |> alpha.bags(alpha = c(0.85,0.9,0.95,0.99),lty = c(1,2,3,4))
#ab.examp$alpha.bags
ab.examp |> plot()
```
:::

## Concentration ellipses

::: fragment
This function creates $\kappa$-ellipses

The `ellipses()` function appends the biplot object with the following
elements:

-   A list of coordinates for the $\kappa$-ellipses for each group

-   A vector of colours for the $\kappa$-ellipses

-   A vector of line types for the $\kappa$-ellipses

-   A vector of line widths for the $\kappa$-ellipses

-   A vector of $\alpha$ values

:::

## Concentration ellipses


### Concentration ellipses in the CVA biplot 
::: fragment

```{r Concentration ellipses}
kc.examp<-biplot(state.x77) |> CVA(state.region) |> ellipses(alpha = c(0.85,0.9,0.95,0.99),lwd = c(1,2,3,4))
#kc.examp$conc.ellipses
kc.examp |> plot()
```

:::




## Measures of fit

::: fragment
```{r Using the fit.measures() function}
bp <- biplot(state.x77) |> CVA(classes = state.region) |> fit.measures()
```
:::

::: fragment
Contains the following information on how well the biplot represents the
information of the original and canonical space:

-   `quality`: Quality of fit for canonical and original variables
-   `adequacy`: Adequacy of original variables
-   `axis.predictivity`: Axis predictivity
-   `within.class.axis.predictivity`: Class predictivity
-   `within.class.sample.predictivity`: Sample predictivity
:::

## Summary of measures of fit

::: fragment
The `summary()` function prints to screen the `fit.measures` stored in
the object of class
[biplot]{style="font-family: 'Noto Sans Mono', monospace"}.
:::

::: fragment
```{r Using the summary() function }
bp |> summary()
```
:::

## Rotation

::: fragment
The `rotate()` function rotates the samples and axes in the
[biplot]{style="font-family: 'Noto Sans Mono', monospace"} by
`rotate.degrees` degrees.
:::

::: fragment
```{r Using the rotate() function}
par(mfrow=c(1,2))
bp |> plot()
bp |> rotate(rotate.degrees=90)|> plot()
```
:::

## Reflection

::: fragment
The `reflect()` function reflects the samples and axes in the
[biplot]{style="font-family: 'Noto Sans Mono', monospace"} along an
axis, `x`(horisontal reflection), `y` (vertical reflection) or `xy`
(diagonal reflection).
:::

::: fragment
```{r Using the reflect() function}
par(mfrow=c(1,2))
bp |> plot()
bp |> reflect(reflect.axis ="y")|> plot()
```
:::

## The argument zoom=`TRUE` in plot()

::: fragment
The argument `zoom=` is `FALSE` by default. If `zoom=TRUE` a new
graphical device is launched. The user is prompted to click on the
desired upper left hand and lower right hand corners of the zoomed in
plot.
:::

::: fragment
```{r Using the zoom argument in plot(), echo=TRUE, eval=FALSE}
bp |>  plot(zoom=TRUE)
```
:::

## 1 Dimensional biplot CVA of state.x77 data

::: fragment
```{r One dimensional CVA biplot}
biplot(state.x77,classes=state.region) |> CVA(dim.biplot=1) |> classify() |> plot()
```
:::

## 1 Dimensional biplot PCA of iris data

::: fragment
```{r One dimensional PCA biplot}
biplot(iris,group.aes=iris$Species) |> PCA(dim.biplot=1) |> density1D() |> ellipses() |> plot()
```
:::

## 3 Dimensional biplots

::: fragment 
The `dim.biplot` argument can be set to `3` to allow the user to create
a 3D biplot. The `plot()` function makes use of the `RGL` device for the
3D display.
:::

::: fragment
### 3D PCA biplot of the `iris` data


```{r 3D biplot iris}
biplot(iris) |> PCA(group.aes = iris[,5],dim.biplot = 3)|> plot()
```
:::

## 3 Dimensional biplots

::: fragment 
### 3D biplot of the `state.x77` data with class means 
```{r 3D biplot statex77}
biplot(state.x77) |> CVA(classes = state.region,dim.biplot = 3) |> means(col = "red",cex = 5) |> plot()
```



:::::::::::::::
