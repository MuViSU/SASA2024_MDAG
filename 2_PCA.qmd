## What are biplots?

::: {style="font-size: 120%;"}

::: incremental
-   The biplot is a powerful and very useful data visualisation tool.

-   Biplots make information in a table of data become transparent,
    revealing the main structures in the data in a methodical way, for
    example patterns of correlations between variables or similarities
    between the observations.

-   A biplot is a generalisation of a two-dimensional scatter diagram of
    data that exists in a higher dimensional space, where information on
    both samples and variables can be displayed graphically.

-   There are different types of biplots that are based on various
    multivariate data analysus techniques.
:::
:::

## Flow of functions in biplotEZ {auto-animate=true auto-animate-easing="ease-in-out"}

<div class="fragment" style="display: flex; justify-content: space-between;   display: flex;
  justify-content: center;
  align-items: center;">

<div style="flex: 1; padding: 10px;">
**Main Function**
</div>



<div class="fragment" style="flex: 1; padding: 10px;">
**Types of Biplot (1, 2, and 3 dimensions)**


</div>

<div class="fragment" style="flex: 1; padding: 10px;">
**Operations**

</div>

<div class="fragment" style="flex: 1; padding: 10px;">
**Aesthetic Functions**

</div>

<div class="fragment" style="flex: 1; padding: 10px;">
**Plotting**

</div>

</div>

<div class="fragment" style="display: flex; justify-content: space-between;   display: flex;
  justify-content: center;
  align-items: center;">

<div data-id="box1" style="flex: 1; padding: 10px;">
 `biplot()`
</div>



<div class="fragment" style="flex: 1; padding: 10px;">

`PCA()` <br>
`CVA()` <br>
`PCO()` <br>
`CA()`

</div>

<div class="fragment" style="flex: 1; padding: 10px;   display: flex; justify-content: center; align-items: center;">

`prediction()` <br>
`interpolate()` <br>
`translate()` <br>
`density()` <br>
 `fit.measures()` <br>
 `classify()` <br>
 `alpha.bags()` <br>
 `ellipses()` <br>
 `rotate()` <br>
 `reflect()` <br>
 `zoom()` <br>
 `regress()` <br>
 `splines()`
</div>

<div class="fragment" style="flex: 1; padding: 10px;">

 `samples()` <br>
 `axes()`
 `newsamples()`
 `newaxes()`
</div>

<div class="fragment" style="flex: 1; padding: 10px;">

 `plot()`
</div>

</div>


## First step to create a biplot {auto-animate=true auto-animate-easing="ease-in-out"}
::: {data-id="box1"}
```{r, echo = TRUE, eval = TRUE}
#| out-width: 100%
biplot(data = iris, 
       group.aes = iris[,5],
       Title = "My first biplot")
```
:::

::: fragment 
| Argument | Description |
|-----------------|-------------------------------------------------------|
| `data` | a dataframe or matrix containing all variables the user wants to analyse. |
| `classes` | a vector identifying class membership. Required for CVA biplots |
| `group.aes` | Variable from the data to be used as a grouping variable. |
| `center` | a logical value indicating whether data should be column centered, with default TRUE. |
| `scaled` | a logical value indicating whether data should be standardised to unit column variances, with default FALSE. |
| `Title` | Title of the biplot to be rendered. |
:::

## Type of biplot: PCA
::: fragment
```{r, echo = TRUE, eval = FALSE}
PCA()
```
:::

::: fragment
| Argument | Description |
|------------------|------------------------------------------------------|
| `bp` | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |
| `dim.biplot` | Dimension of the biplot. Only values 1, 2 and 3 are accepted, with default `2`. |
| `e.vects` | Which eigenvectors (principal components) to extract, with default `1:dim.biplot`. |
| `group.aes` | If not specified in `biplot()` |
| `show.class.means` | `TRUE` or `FALSE`: Indicating whether group means should be plotted in the biplot, with default `FALSE`.|
| `correlation.biplot` | `TRUE` or `FALSE`: Indicating whether distances or correlations between the variables are optimally approximated, with defautl `FALSE`. |

: {tbl-colwidths="\[25,75\]"}

:::
## Construction of PCA biplot

::: fragment 
-   Consider a data matrix ${\bf{X}}^*$ of size $n \times p$.
-   Using the Iris data as an example, there are $n=150$ observations
    measured across $p=4$ variables.

:::

::: fragment

```{r}
tibble(iris)
```
:::

::: incremental
-   To produce a biplot, we need to optimally approximate
    ${\bf{X}} = ({\bf{I}}_n - \frac{1}{n}{\bf{11}}'){\bf{X}}^*$.
-   We want to minimise $min || {\hat{\bf{X}}} - {\bf{X}}||^2$.
-   The best approximation that minimises the least squares criterion is
    the $r$-dimensional Eckart-Young approximation given by
    ${\bf{\hat{X}}}_{[r]} = {\bf{U}} {\bf{D}}_{[r]} {\bf{V}}'$.
:::

## Representing samples
::: fragment
A standard result when $r = 2$ is that the row vectors of
${\bf{\hat{X}}}_{[2]}$ are the orthogonal projects of the corresponding
row vectors of ${\bf{X}}$ onto the column space of ${\bf{V}}_2$. These projections are also known as the first two principal components.
:::

::: fragment
```{r,echo=FALSE}
#| fig-height: 7
biplot(iris) |> PCA() |> samples(col = "blue",opacity = 0.5) |> axes(which = NULL) |> plot()
```
:::

## Representing variables
::: fragment
The columns of ${\bf{X}}$ are approximated by the first two rows of
${\bf{V}}$, which now represent the axes for each variable.
:::

::: fragment
```{r,echo=FALSE}
#| fig-height: 7
bp <- biplot(iris) |> PCA() |> samples(col = "blue", opacity = 0.5) |> 
  axes(which = NULL) |> plot()
V <- bp$V
arrows(0,0,V[1,1],V[1,2],length = 0.05)
arrows(0,0,V[2,1],V[2,2],length = 0.05)
arrows(0,0,V[3,1],V[3,2],length = 0.05)
arrows(0,0,V[4,1],V[4,2],length = 0.05)
```
:::

::: fragment
The arrows representing the variables in the data can be calibrated to
display marker points analogous to ordinary scatterplots.
:::

## PCA biplot

```{r}
biplot(data = iris, 
       group.aes = iris[,5],
       Title = "My first biplot") |> PCA() |> plot()
```

## Aesthetics: `samples()`

Change the colour, plotting character and character expansion of the
samples.

```{r}
#| code-line-numbers: "|3|4|"
biplot(iris, group.aes = iris[,5]) |> 
  PCA() |> 
  samples(col = c("orange","purple","gold"), pch = c(15,1,17), cex = 1.2, 
          opacity = 0.6) |> plot()
```

::: {style="font-size: 70%;"}
Notice that aesthetics in samples are applied to `group.aes` argument
specified. Here there are three groups.
:::

## Aesthetics: `samples()`

Select certain groups, and add labels to the samples

```{r}
#| code-line-numbers: "|3|"
#| fig-width: 7
biplot(iris, group.aes = iris[,5]) |> 
  PCA() |> 
  samples(which = c(1,2), col = c("orange","purple"), label = TRUE) |> 
  plot()
```

## Aesthetics: `samples()`

### Other arguments

| Argument | Description |
|-----------------|-------------------------------------------------------|
| `label.col` | Colour of labels |
| `label.cex` | Text expansion of the labels |
| `label.side` | Side at which the label of the plotted point appears - "bottom" (default), "top", "left", "right" |
| `label.offset` | Offset of the label from the plotted point |
| `connected` | `TRUE` or `FALSE`: whether samples are connected, with default `FALSE` |
| `connect.col` | Colour of the connecting line |
| `connect.lty` | Line type of the connecting line |
| `connect.lwd` | Line width of the connecting line |

## Aesthetics: `axes()`

Change the colour and line width of the axes

```{r}
#| code-line-numbers: "|2|"
#| #| fig-width: 7
biplot(iris[,1:4]) |> PCA() |> samples(col = "grey", opacity = 0.5) |>
  axes(col = "rosybrown", label.dir = "Orthog", lwd = 2) |> plot()
```

## Aesthetics: `axes()`

Show the first two axes with vector representation and unit circle

```{r}
#| code-line-numbers: "|2|"
#| #| fig-width: 7
biplot(iris[,1:4]) |> PCA() |> samples(col = "grey", opacity = 0.5) |>
  axes(which = 1:2, col = "rosybrown", vectors = TRUE, unit.circle = TRUE) |> 
  plot()
```

## Aesthetics: `axes()`

### Other arguments

::::: {.container style="display: flex; justify-content: space-between; text-align: left;"}
::: {.column style="width: 45%;"}
|  Axis labels   |
|:--------------:|
|   `ax.names`   |
|  `label.dir`   |
|  `label.col`   |
|  `label.cex`   |
|  `label.line`  |
| `label.offset` |

<div class="spaced-table"></div> <!-- Adds space -->

|       Ticks       |
|:-----------------:|
|      `ticks`      |
|    `tick.size`    |
|   `tick.label`    |
| `tick.label.side` |
| `tick.label.col`  |
:::

::: {.column style="width: 45%;"}
|  Prediction   |
|:-------------:|
| `predict.col` |
| `predict.lwd` |
| `predict.lty` |

<div class="spaced-table"></div> <!-- Adds space -->

| Orthogonal |
|:----------:|
| `orthogx`  |
| `orthogy`  |
:::
:::::

## Prediction of samples

### `prediction()`

```{r}
#| code-line-numbers: "|3|4|"
#| #| fig-width: 7
out <- biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.samples = c(1:2,51:52,101:102) )|>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Prediction of samples

Predict only on the variable `Sepal.Length`: use the `which` argument.

```{r}
#| code-line-numbers: "|3|"
#| #| fig-width: 7
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.samples = c(1:2,51:52,101:102), which = "Sepal.Length")|>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Prediction of group means

```{r}
#| code-line-numbers: "|1|3|"
#| #| fig-width: 7
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA(show.class.means = TRUE) |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.means = TRUE) |>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Predictions

```{r}
summary(out)
```

## Interpolation of samples

```{r}
#| code-line-numbers: "|2|3|"
#| fig-width: 7
biplot(iris[1:100,]) |> PCA() |> 
  interpolate (newdata = iris[101:150,]) |> 
  newsamples(col = "red") |> plot()
```

## Interpolation of axes

```{r}
#| code-line-numbers: "|2|3|"
#| fig-width: 7
biplot(iris[,1:3]) |> PCA() |> 
    interpolate(newdata = NULL, newvariable = iris[,4]) |> 
    newaxes(X.new.names = "Petal.Width") |> plot()
```

## Translation

Automatically or manually translate the axes away from the center of the
plot.

```{r}
#| code-line-numbers: "|3|"
#| fig-width: 7
biplot(iris)|> 
      PCA(group.aes = iris[,5]) |> 
      translate_axes(swop=TRUE, delta = 0.2)|> plot(exp.factor = 3)
```

## Density plots

On the first group

```{r}
#| code-line-numbers: "|2|"
#| fig-width: 7
biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 1, col = c("white","purple","cyan","blue")) |> plot()
```

## Density plots

On the second group, and adding contours 

```{r}
#| code-line-numbers: "|2|3|"
#| fig-width: 7
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 2, col = c("white","purple","cyan","blue"),
            contours = TRUE) |> plot()
```

## Density plots

On the third group, and changing the colour of the contours. 

```{r}
#| code-line-numbers: "|3|"
#| fig-width: 7
biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 3, col = c("white","purple","cyan","blue"), contours = TRUE,
            contour.col = "grey") |> plot()
```


## Fit measures

```{r}
out2 <- biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> fit.measures()
summary(out2)
```
