## What are biplots?

::: {style="font-size: 120%;"}

::: incremental
-   The biplot is a powerful and very useful data visualisation tool.

-   Biplots make information in a table of data become transparent,
    revealing the main structures in the data in a methodical way, for
    example patterns of correlations between variables or similarities
    between the observations.

-   A biplot is a generalisation of a two-dimensional scatter diagram of
    data that exists in a higher dimensional space, where information on
    both samples and variables can be displayed graphically.

-   There are different types of biplots that are based on various
    multivariate data analysis techniques.
    
-   The simplest type of biplot is based on Principal Component Analysis.
:::
:::


## Theory behind constructing a PCA biplot

::: columns
::: {.column width="50%"}
Data: ${\bf{X}}$

```{r echo=FALSE}
X <- as.data.frame(matrix(c(13.5471	,	12.6356	,	21.7779	,
                            7.8248	,	4.4579	,	8.4648,
                            15.3202	,	5.433	,	20.4339	,
                            16.9528	,	11.8832 ,	21.8291,
                            18.3664	,	14.733	,	28.2576,
                            18.0205	,	9.36	,	25.1894,
                            17.5986	,	13.0341	,	21.5221	,
                            13.6643	,	11.2316	,	13.9913,
                            19.3081	,	11.7703	,	28.3937	,
                            17.7739	,	12.4688	,	19.3321,
                            20.3395	,	10.98	,	23.1621	,
                            15.7187	,	14.7718	,	18.7206	,
                            11.6222	,	17.9957	,	21.4343,
                            14.4965	,	15.3002	,	20.6371	,
                            20.2114	,	8.0871	,	22.4164,
                            19.5328	,	11.8101	,	22.1391,
                            16.1871	,	10.0019	,	16.2823,
                            17.5598	,	10.0402	,	20.3788,
                            17.2416	,	13.5807	,	25.4979,
                            16.2913	,	14.9305	,	22.9105,
                            17.7401	,	15.5304	,	22.6354,
                            8.5554	,	12.2874	,	12.9827,
                            11.1397	,	12.4292	,	18.0374,
                            11.993	,	13.4574	,	21.6548,
                            10.7568	,	6.6412	,	17.6931), nrow=25,ncol=3,byrow=T))

X = rbind(X[1:15,]/2.5,X[1:10,]/2.2)
colnames(X) <- c("X1","X2","X3")
X
```
:::

::: {.column width="50%"}
![](figures/Data_in3d.png){height="300,fig-align=\"center\""}
:::
:::

## Theory behind constructing a PCA biplot
::: {style="font-size: 120%;"}

::: columns
::: {.column width="60%"}
::: fragment
Geometrically the rows of ${\bf{X}}$ are given as coordinates of $n$ samples in the $p$-dimensional space $\mathbb{R}^p$.
:::

::: fragment
The aim is to seek an $r$-dimensional plane that contains the points whose coordinates are given by the rows of ${\bf{\hat{X}}}_{[r]}$ which minimises a least squares criterion given by, \begin{equation}
|| {\bf{X}} - {\bf{\hat{X}}}_{[r]}||^2 = tr\{({\bf{X}} - {\bf{\hat{X}}}_{[r]})({\bf{X}} - {\bf{\hat{X}}}_{[r]})'\}.
\end{equation}
:::
:::

::: {.column width="40%"}
::: fragment
![](figures/Pointsonplane.png){height="400,fig-align=\"center\""}
:::
:::
:::

::: fragment
The best approximation that minimises the least squares criterion is the $r$-dimensional Eckart-Young approximation given by ${\bf{\hat{X}}}_{[r]} = {\bf{U}} {\bf{D}}_{[r]} {\bf{V}}'$
:::

:::

## Representing samples

::: {style="font-size: 120%;"}

::: columns
::: {.column width="60%"}
::: fragment
A standard result when $r=2$ from \citep{gower1995biplots} is that the row vectors of ${\bf{\hat{X}}}_{[2]}$ are the orthogonal projections of the corresponding row vectors of ${\bf{X}}$ onto the column space of ${\bf{V}}_2$. The projections are therefore,

\begin{equation}
{\bf{X}} {\bf{V}}_2.
\end{equation} These projections are also known as the first two principal components.
:::
:::

::: {.column width="40%"}
::: fragment
![](figures/scatterponts.png){height="400,fig-align=\"center\""}
:::
:::

:::
:::

## Representing variables

::: {style="font-size: 120%;"}

The columns of ${\bf{X}}$ are approximated by the first two rows of ${\bf{V}}$, which now represent the axes for each variable.

```{r echo=FALSE}
#| fig-height: 6
bp <- biplot(X) |> PCA() |> samples(label=TRUE,col="blue",opacity = 0.6) |> axes(which=NULL) |> plot()
arrows(0,0,bp$Vr[1,1]*3,bp$Vr[1,2]*3,length=0.08)
arrows(0,0,bp$Vr[2,1]*3,bp$Vr[2,2]*3,length=0.08)
arrows(0,0,bp$Vr[3,1]*3,bp$Vr[3,2]*3,length=0.08)
```

:::

## Calibrated biplot axes
::: {style="font-size: 120%;"}
We have constructed a biplot, but the variables represented by the vectors (arrows) have no calibration.

That meaning, there are no markers on the vectors representing the variables analogous to ordinary scatterplots.

To construct a biplot axis with relevant markers for a variable, a $(p-1)$-dimensional hyperplane $\mathscr{N}$ perpendicular to the Cartesian axis is required.

:::
## First plane


From the data, $p = 3$ therefore, a two-dimensional hyperplane is constructed perpendicular to $X_1$ through a specific value of $X_1$, say $\mu$.

The intersection of $\mathscr{L}$ and $\mathscr{N}$ is an $(r-1)$-dimensional intersection space, which in this case will be indicated by a line. All the points on this intersection line in $\mathscr{L}$ will predict the value for $\mu$ for the $X_1$-axis.

![](figures/First_Nplane.png){fig-align="center"}


## Second plane

The plane $\mathscr{N}$ is shifted orthogonally through another value on $X_1$ and all the points on the intersection line of $\mathscr{L}$ and $\mathscr{N}$ will predict that value that the plane goes through.

![](figures/Second_Nplane.png){fig-align="center"}

## Intersection lines
::: {style="font-size: 120%;"}
::: columns
::: {.column width="60%"}
As the plane $\mathscr{N}$ is shifted along the $X_1$-axis, a series of parallel intersection spaces is obtained.

Any line passing through the origin will pass through these intersection spaces and can be used as an axis fitted with markers according to the value associated with the particular intersection space.

To facilitate orthogonal projection onto the axis, similar to an ordinary scatterplot, the line orthogonal to these intersection spaces is chosen.
:::

::: {.column width="40%"}
![](figures/Intersection_lines.png){fig-align="center"}
:::
:::
:::


## PCA biplot
With variable 1

```{r echo=FALSE}
#| fig-width: 8
biplot(X) |> PCA() |> axes(which=1) |> plot()
```


## PCA biplot
With all variables

```{r echo=FALSE}
#| fig-width: 8
biplot(X) |> PCA() |> axes() |> plot()
```


## Flow of functions in biplotEZ
::: {style="font-size: 120%;"}
::: {style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;"}

<!-- Main Function Column -->
<div class = "fragment" style="text-align: left; display: flex; flex-direction: column;">
<div>
**Main Function**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`biplot()`
</div>
</div>

<!-- Types of Biplot Column -->
<div class = "fragment" style="text-align: left; display: flex; flex-direction: column;">
<div>
**Type of Biplot**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`PCA()`  
`CVA()`<br>
`PCO()`  
`CA()`
</div>
</div>

<!-- Aesthetic Functions Column -->
<div class="fragment" style="text-align: left; display: flex; flex-direction: column;">
<div>
**Aesthetics**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`samples()`  
`axes()`
`newsamples()`  
`newaxes()`
</div>
</div>

<!-- Operations Column -->
<div class="fragment" style="text-align: left; display: flex; flex-direction: column;">
<div>
**Operations**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`prediction()`  
`interpolate()`  
`translate()`  
`density()`  
`fit.measures()`  
`classify()`
`alpha.bags()`  
`ellipses()`  
`rotate()`  
`reflect()`  
`zoom()`  
`regress()`  
`splines()`
</div>
</div>

<div class = "fragment" style="text-align: left; display: flex; flex-direction: column;">
<div>
**Plotting**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`plot()`
</div>
</div>

:::
:::

## First step to create a biplot {auto-animate="true"}

```{r, echo = TRUE, eval = FALSE}
#| out-width: 100%
biplot()
```

## First step to create a biplot {auto-animate="true"}

```{r, echo = TRUE, eval = FALSE}
#| out-width: 100%
biplot(data = iris,
       )
```

## First step to create a biplot {auto-animate="true"}

```{r, echo = TRUE, eval = TRUE}
#| out-width: 100%
#| output-location: fragment
biplot(data = iris,
       group.aes = iris[,5], 
       Title = "My first biplot"
       )
```


::: fragment 
| Argument | Description |
|-----------------|-------------------------------------------------------|
| `data` | a dataframe or matrix containing all variables the user wants to analyse. |
| `classes` | a vector identifying class membership. Required for CVA biplots |
| `group.aes` | Variable from the data to be used as a grouping variable. |
| `center` | a logical value indicating whether data should be column centered, with default TRUE. |
| `scaled` | a logical value indicating whether data should be standardised to unit column variances, with default FALSE. |
| `Title` | Title of the biplot to be rendered. |
:::


## `PCA` function
::: fragment
```{r, echo = TRUE, eval = FALSE}
PCA()
```
:::

::: fragment
| Argument | Description |
|------------------|------------------------------------------------------|
| `bp` | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |
| `dim.biplot` | Dimension of the biplot. Only values 1, 2 and 3 are accepted, with default `2`. |
| `e.vects` | Which eigenvectors (principal components) to extract, with default `1:dim.biplot`. |
| `group.aes` | If not specified in `biplot()` |
| `show.class.means` | `TRUE` or `FALSE`: Indicating whether group means should be plotted in the biplot, with default `FALSE`.|
| `correlation.biplot` | `TRUE` or `FALSE`: Indicating whether distances or correlations between the variables are optimally approximated, with default `FALSE`. |

: {tbl-colwidths="\[25,75\]"}

:::



## Data 

```{r}
tibble(iris)
```


## PCA biplot {auto-animate="true"}

```{r eval=FALSE, echo=TRUE}
biplot(data = iris, group.aes = iris[,5],
       Title = "My first biplot") |>
```

## PCA biplot {auto-animate="true"}

```{r}
#| output-location: fragment
#| fig-height: 6
biplot(data = iris, group.aes = iris[,5],
       Title = "My first biplot") |> 
  PCA() |> 
  plot()
```


## Flow of functions in biplotEZ
::: {style="font-size: 120%;"}
::: {style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;"}

<!-- Main Function Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Main Function**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`biplot()`
</div>
</div>

<!-- Types of Biplot Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Type of Biplot**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`PCA()`  
`CVA()`<br>
`PCO()`  
`CA()`
</div>
</div>

<!-- Aesthetic Functions Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Aesthetics**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`samples()`  
`axes()`
`newsamples()`  
`newaxes()`
</div>
</div>

<!-- Operations Column -->
<div style="text-align: left; display: flex; flex-direction: column; opacity: 0.3;">
<div>
**Operations**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`prediction()`  
`interpolate()`  
`translate()`  
`density()`  
`fit.measures()`  
`classify()`
`alpha.bags()`  
`ellipses()`  
`rotate()`  
`reflect()`  
`zoom()`  
`regress()`  
`splines()`
</div>
</div>

<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Plotting**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`plot()`
</div>
</div>

:::
:::


## Aesthetics: `samples()` {auto-animate="true"}

Change the colour, plotting character and character expansion of the
samples.

```{r eval=FALSE, echo=TRUE}
  samples(col = c("orange","purple","gold"), pch = c(15,1,17), cex = 1.2, 
          opacity = 0.6) |> 
```



## Aesthetics: `samples()` {auto-animate="true"}

Change the colour, plotting character and character expansion of the
samples.

```{r}
#| output-location: fragment
#| fig-height: 6
biplot(iris, group.aes = iris[,5]) |> 
  PCA() |> 
  samples(col = c("orange","purple","gold"), pch = c(15,1,17), cex = 1.2, 
          opacity = 0.6) |> 
  plot()
```

## Aesthetics: `samples()`

Select certain groups, and add labels to the samples

```{r}
#| code-line-numbers: "3|"
#| output-location: fragment
#| fig-height: 6
biplot(iris, group.aes = iris[,5]) |> 
  PCA() |> 
  samples(which = c(1,2), col = c("orange","purple"), label = TRUE) |> 
  plot()
```

## Aesthetics: `samples()`

### Other arguments

| Argument | Description |
|-----------------|-------------------------------------------------------|
| `label.col` | Colour of labels |
| `label.cex` | Text expansion of the labels |
| `label.side` | Side at which the label of the plotted point appears - "bottom" (default), "top", "left", "right" |
| `label.offset` | Offset of the label from the plotted point |
| `connected` | `TRUE` or `FALSE`: whether samples are connected, with default `FALSE` |
| `connect.col` | Colour of the connecting line |
| `connect.lty` | Line type of the connecting line |
| `connect.lwd` | Line width of the connecting line |



## Aesthetics: `axes()` {auto-animate="true"}

Change the colour and line width of the axes

```{r eval=FALSE, echo = TRUE}
#| output-location: fragment
biplot(iris[,1:4]) |> PCA() |> 
  samples(col = "grey", opacity = 0.5) |>
```

## Aesthetics: `axes()` {auto-animate="true"}

Change the colour and line width of the axes

```{r}
#| output-location: fragment
#| fig-height: 6
biplot(iris[,1:4]) |> PCA() |> 
  samples(col = "grey", opacity = 0.5) |>
  axes(col = "rosybrown", label.dir = "Orthog", lwd = 2) |> 
  plot()
```

## Aesthetics: `axes()`

Show the first two axes with vector representation and unit circle

```{r}
#| code-line-numbers: "3|"
#| output-location: fragment
#| fig-height: 6
biplot(iris[,1:4]) |> PCA() |> 
  samples(col = "grey", opacity = 0.5) |>
  axes(which = 1:2, col = "rosybrown", vectors = TRUE, unit.circle = TRUE) |> 
  plot()
```

## Aesthetics: `axes()`

### Other arguments

::::: {.container style="display: flex; justify-content: space-between; text-align: left;"}
::: {.column style="width: 45%;"}
|  Axis labels   |
|:--------------:|
|   `ax.names`   |
|  `label.dir`   |
|  `label.col`   |
|  `label.cex`   |
|  `label.line`  |
| `label.offset` |

<div class="spaced-table"></div> <!-- Adds space -->

|       Ticks       |
|:-----------------:|
|      `ticks`      |
|    `tick.size`    |
|   `tick.label`    |
| `tick.label.side` |
| `tick.label.col`  |
:::

::: {.column style="width: 45%;"}
|  Prediction   |
|:-------------:|
| `predict.col` |
| `predict.lwd` |
| `predict.lty` |

<div class="spaced-table"></div> <!-- Adds space -->

| Orthogonal |
|:----------:|
| `orthogx`  |
| `orthogy`  |
:::
:::::


## Flow of functions in biplotEZ
::: {style="font-size: 120%;"}
::: {style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;"}

<!-- Main Function Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Main Function**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`biplot()`
</div>
</div>

<!-- Types of Biplot Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Type of Biplot**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`PCA()`  
`CVA()`<br>
`PCO()`  
`CA()`
</div>
</div>

<!-- Aesthetic Functions Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Aesthetics**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`samples()`  
`axes()`
`newsamples()`  
`newaxes()`
</div>
</div>

<!-- Operations Column -->
<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Operations**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`prediction()`  
`interpolate()`  
`translate()`  
`density()`  
`fit.measures()`  
`classify()`
`alpha.bags()`  
`ellipses()`  
`rotate()`  
`reflect()`  
`zoom()`  
`regress()`  
`splines()`
</div>
</div>

<div style="text-align: left; display: flex; flex-direction: column;">
<div>
**Plotting**
</div>
<div style="display: flex; align-items: center; height: 100%;">
`plot()`
</div>
</div>

:::
:::


## Prediction of samples {auto-animate="true"}

### `prediction()` 

```{r eval = FALSE, echo =TRUE}
out <- biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
```

## Prediction of samples {auto-animate="true"}

### `prediction()` 

```{r eval = FALSE, echo =TRUE}
out <- biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.samples = c(1:2,51:52,101:102) )|>
```


## Prediction of samples {auto-animate="true"}

### `prediction()`

```{r}
#| output-location: fragment
#| fig-height: 6
out <- biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.samples = c(1:2,51:52,101:102) )|>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Prediction of samples

Predict only on the variable `Sepal.Length`: use the `which` argument.

```{r}
#| code-line-numbers: "3|"
#| output-location: fragment
#| fig-height: 6
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.samples = c(1:2,51:52,101:102), which = "Sepal.Length")|>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Prediction of group means

```{r}
#| code-line-numbers: "1|3|4|"
#| output-location: fragment
#| fig-height: 6
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA(show.class.means = TRUE) |> 
  samples(col = c("orange","purple","gold"), opacity = 0.5) |>
  prediction(predict.means = TRUE) |>
  axes(predict.col = "red", predict.lwd = 1.5, predict.lty = 2) |> plot()
```

## Predictions

```{r}
summary(out)
```

## Interpolation of samples {auto-animate="true"}

```{r eval = FALSE, echo=TRUE}
#| fig-height: 7
biplot(iris[1:100,]) |> PCA() |> 
```

## Interpolation of samples {auto-animate="true"}

```{r eval = FALSE, echo=TRUE}
#| fig-height: 7
biplot(iris[1:100,]) |> PCA() |> 
  interpolate (newdata = iris[101:150,]) |> 
```

## Interpolation of samples {auto-animate="true"}

```{r}
#| fig-height: 7
#| output-location: fragment
biplot(iris[1:100,]) |> PCA() |> 
  interpolate (newdata = iris[101:150,]) |> 
  newsamples(col = "red") |> plot()
```

## Interpolation of axes

```{r}
#| code-line-numbers: "2|3|"
#| fig-height: 7
#| output-location: fragment
biplot(iris[,1:3]) |> PCA() |> 
    interpolate(newdata = NULL, newvariable = iris[,4]) |> 
    newaxes(X.new.names = "Petal.Width") |> plot()
```

## Translation

Automatically or manually translate the axes away from the center of the
plot.

```{r}
#| code-line-numbers: "3|"
#| fig-height: 6
#| output-location: fragment
biplot(iris)|> 
      PCA(group.aes = iris[,5]) |> 
      translate_axes(swop = TRUE, delta = 0.2)|> plot(exp.factor = 3)
```

## Density plots {auto-animate="true"}

On the first group

```{r eval =FALSE, echo=TRUE}
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
```

## Density plots {auto-animate="true"}

On the first group

```{r}
#| fig-height: 7
biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 1, col = c("white","purple","cyan","blue")) |> plot()
```

## Density plots

On the second group, and adding contours 

```{r}
#| code-line-numbers: "2|3|"
#| fig-height: 7
biplot(iris[,1:4], group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 2, col = c("white","purple","cyan","blue"),
            contours = TRUE) |> plot()
```

## Density plots

On the third group, and changing the colour of the contours. 

```{r}
#| code-line-numbers: "|3|"
#| fig-height: 7
biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> 
  density2D(which = 3, col = c("white","purple","cyan","blue"),contours = TRUE,
            contour.col = "grey") |> plot()
```


## Fit measures

```{r}
out2 <- biplot(iris[,1:4],group.aes = iris[,5]) |> PCA() |> fit.measures()
summary(out2)
```
